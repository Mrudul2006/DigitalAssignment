module full_adder(A, B, Cin, Sum, Cout);
    input A, B, Cin;
    output Sum, Cout;

    assign Sum = A ^ B ^ Cin;
    assign Cout = (A & B) | (B & Cin) | (A & Cin);
endmodule

module full_ripple_carry_adder(A, B, Cin, Sum, Cout);
    input [7:0] A, B;
    input Cin;
    output [7:0] Sum;
    output Cout;

    wire [6:0] carry;

    full_adder FA0 (A[0], B[0], Cin,      Sum[0], carry[0]);
    full_adder FA1 (A[1], B[1], carry[0], Sum[1], carry[1]);
    full_adder FA2 (A[2], B[2], carry[1], Sum[2], carry[2]);
    full_adder FA3 (A[3], B[3], carry[2], Sum[3], carry[3]);
    full_adder FA4 (A[4], B[4], carry[3], Sum[4], carry[4]);
    full_adder FA5 (A[5], B[5], carry[4], Sum[5], carry[5]);
    full_adder FA6 (A[6], B[6], carry[5], Sum[6], carry[6]);
    full_adder FA7 (A[7], B[7], carry[6], Sum[7], Cout);
endmodule


testbench
module tb_full_ripple_carry_adder;
    reg [7:0] A, B;
    reg Cin;
    wire [7:0] Sum;
    wire Cout;

    full_ripple_carry_adder uut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .Sum(Sum),
        .Cout(Cout)
    );

    initial begin
        $dumpfile("waveform.vcd");
      $dumpvars(1, tb_full_ripple_carry_adder);

        A = 8'b00000000; B = 8'b00000000; Cin = 0; #10;
        A = 8'b00000001; B = 8'b00000001; Cin = 0; #10;
        A = 8'b10101010; B = 8'b01010101; Cin = 0; #10;
        A = 8'b11111111; B = 8'b00000001; Cin = 0; #10;
        A = 8'b11111111; B = 8'b11111111; Cin = 1; #10;

        $finish;
    end
endmodule
